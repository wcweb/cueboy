server.modules = ("mod_fastcgi", 
					"mod_cgi", 
					# "mod_staticfile",
					"mod_redirect",
					"mod_compress",     
					"mod_h264_streaming",               
                    # "mod_access",                      
                    # "mod_accesslog" ,
					"mod_rewrite",
					# "mod_proxy_core",
# 					    "mod_proxy_backend_http",
# 					    "mod_proxy_backend_fastcgi",
								# "mod_cache", # make sure mod_cache loaded before mod_proxy
								"mod_expire"
								)
server.document-root = "./"
server.errorlog = var.CWD + "/lighttpd.errors"
server.port = 9203
server.bind = "127.0.0.1"

server.event-handler = "select"

server.error-handler-404 = "/dispatch.fcgi"
#ulr重写规则 
# url.rewrite-once = ( "^/.*$"  => "/dispatch.fcgi/$" )
# url.rewrite = ( "^([\-_a-zA-Z0-9]+)/" => "/dispatch.fcgi/$1")
		

#### 定义运行时的进程文件，便于脚本控制
  # server.pid-file            = "/home/lighttpd/logs/lighttpd.pid"
server.pid-file            = "/tmp/lighttpd.pid"


#### 定义默认站点文件
  index-file.names            = ( "dispatch.fcgi","index.php", "index.html",         
                                  "index.htm", "default.htm" )       
#### 定义mime类型
mimetype.use-xattr        = "disable" 
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  # ".html"         =>      "text/html",
  ".html"		 => 		"application/xhtml",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  # default mime type
  ""              =>      "application/octet-stream",
)

# mimetype.use-xattr        = "enable" 

# Files ending in .mp4 and .f4v are served by the module
h264-streaming.extensions = ( ".mp4", ".f4v" )
# The number of seconds after which the bandwidth is shaped (defaults to 0=disable)
h264-streaming.buffer-seconds = 10




#### 定义轮转日志                                      
# accesslog.filename  = "| /home/lighttpd/cronolog/sbin/cronolog /home/lighttpd/logs/access_%Y%m%d.log"
# accesslog.filename  = "| /usr/local/sbin/cronolog /logs/access_%Y%m%d.log"
                
# url.access-deny   = ( "~", ".inc" )                      

#### expire头配置，对html目录，js目录，以及css目录分别设置1、2、3个小时的超时时间。(请根据实际情况合理配置)

  # $HTTP["url"] =~ "/testhtml/"{                                          
#           expire.url = ("" => "access 1 hours")                      
#           }                                                          
#   $HTTP["url"] =~ "/testjs/"{                                            
#           expire.url = ("" => "access 2 hours")                      
#           }                                                          
#   $HTTP["url"] =~ "/testcss/"{                                           
#           expire.url = ("" => "access 3 hours")                      
#           }                                                          

#### static 模块配置，禁止Etag 
 # static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )        
#  static-file.etags = "disable"
  etag.use-inode = "disable"

#### compress 模块配置  
#       定义压缩文件的存放目录
  # compress.cache-dir = "/home/lighttpd/compress"                
# 定义压缩的mime类型，对css、html和js文件进行压缩
  # compress.filetype = ("text/html","text/css","text/javascript")                      
  
#端口设置为2080，避免和apache冲突
  # server.port = 2080
  # server.network-backend = "write"                                  
  server.max-keep-alive-requests = 4                                 
  server.max-keep-alive-idle = 5                                     
  server.max-fds = 3072                                              
  # server.event-handler = "poll"

  # cgi.assign = (
  # 	  # "dispatch.fcgi" =>"",
  # 	# "/dispatch" => "",
  #     ".ru" => ""
  #              )
   fastcgi.map-extensions = ( ".css" => ".html", ".js" => ".html", "/" => ".html")	   
			   
			   
	# url.rewrite = (                                                #ulr重写规则 
	#  	   			"^([\-_a-zA-Z0-9]+)/" => "/dispatch.fcgi/([\-_a-zA-Z0-9]+)",
	# 		    "^/([\-_a-zA-Z0-9]+)/([\-_a-zA-Z0-9]+)/([\-_a-zA-Z0-9%]+)\??([\-_a-zA-Z0-9=&%]*)$" => "/dispatch.fcgi?controller=$1&action=$2&id=$3&$4",
	# 		    "^/([\-_a-zA-Z0-9]+)/([\-_a-zA-Z0-9]+)/?\??([\-_a-zA-Z0-9=&%]*)$" => "/dispatch.fcgi?controller=$1&action=$2&$3",
	# 		    "^/([\-_a-zA-Z0-9]+)/?\??([\-_a-zA-Z0-9=&%]*)$" => "/dispatch.fcgi?controller=$1&action=index&$2" #,
	#   
	# 		   )           


  fastcgi.server = ( 
  	# "cueboy.fcgi" => ("localhost" =>
  	#                     ("min-procs" => 1,
  	#                      "socket" => "/tmp/puma.sock",
  	#                      "bin-path" => "cueboy.fcgi")),
   	# ".html" => ("localhost" =>
   	#                        ("min-procs" => 1,
   	#                         "socket" => "/tmp/puma.sock")
   	# 						),
						
   	"dispatch.fcgi" => ("localhost" =>
                       ("min-procs" => 1,
					   "socket" => "/tmp/dispatch.sock",
                        "bin-path" => CWD + "/dispatch.fcgi"))
  	# "config.fcgi" =>
  # 		("localhost"=>
  # 			( "min-procs" => 1,
  # 			  "socket" => "/tmp/puma.sock",
  # 			  "bin-path" => ""
  # 			 )
  # 		)
		
  #                   "test.fcgi" => ("localhost" =>
  #                     ("min-procs" => 1,
  #                      "socket" => "/tmp/rack-test-fcgi",
  #                      "bin-path" => "test.fcgi")),
  #                   "test.ru" => ("localhost" =>
  #                     ("min-procs" => 1,
  #                      "socket" => "/tmp/rack-test-ru-fcgi",
  #                      "bin-path" => CWD + "/rackup_stub.rb test.ru")),
  #                   "sample_rackup.ru" => ("localhost" =>
  #                     ("min-procs" => 1,
  #                      "socket" => "/tmp/rack-test-rackup-fcgi",
  #                      "bin-path" => CWD + "/rackup_stub.rb sample_rackup.ru")),
  )
